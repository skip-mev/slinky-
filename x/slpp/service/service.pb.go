// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmwasm/slpp/v1/service.proto

package service

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VoteExtensionDataRequest is the request type for the VoteExtensionData RPC
type VoteExtensionDataRequest struct {
}

func (m *VoteExtensionDataRequest) Reset()         { *m = VoteExtensionDataRequest{} }
func (m *VoteExtensionDataRequest) String() string { return proto.CompactTextString(m) }
func (*VoteExtensionDataRequest) ProtoMessage()    {}
func (*VoteExtensionDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f21823faedab0ba, []int{0}
}
func (m *VoteExtensionDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteExtensionDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteExtensionDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteExtensionDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteExtensionDataRequest.Merge(m, src)
}
func (m *VoteExtensionDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *VoteExtensionDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteExtensionDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VoteExtensionDataRequest proto.InternalMessageInfo

// VoteExtensionDataResponse is the response type for the VoteExtensionData RPC
type VoteExtensionDataResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *VoteExtensionDataResponse) Reset()         { *m = VoteExtensionDataResponse{} }
func (m *VoteExtensionDataResponse) String() string { return proto.CompactTextString(m) }
func (*VoteExtensionDataResponse) ProtoMessage()    {}
func (*VoteExtensionDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f21823faedab0ba, []int{1}
}
func (m *VoteExtensionDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteExtensionDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteExtensionDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteExtensionDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteExtensionDataResponse.Merge(m, src)
}
func (m *VoteExtensionDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *VoteExtensionDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteExtensionDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VoteExtensionDataResponse proto.InternalMessageInfo

func (m *VoteExtensionDataResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*VoteExtensionDataRequest)(nil), "cosmwasm.slpp.v1.VoteExtensionDataRequest")
	proto.RegisterType((*VoteExtensionDataResponse)(nil), "cosmwasm.slpp.v1.VoteExtensionDataResponse")
}

func init() { proto.RegisterFile("cosmwasm/slpp/v1/service.proto", fileDescriptor_6f21823faedab0ba) }

var fileDescriptor_6f21823faedab0ba = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xce, 0x2f, 0xce,
	0x2d, 0x4f, 0x2c, 0xce, 0xd5, 0x2f, 0xce, 0x29, 0x28, 0xd0, 0x2f, 0x33, 0xd4, 0x2f, 0x4e, 0x2d,
	0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x80, 0xc9, 0xeb, 0x81,
	0xe4, 0xf5, 0xca, 0x0c, 0x95, 0xa4, 0xb8, 0x24, 0xc2, 0xf2, 0x4b, 0x52, 0x5d, 0x2b, 0x4a, 0x52,
	0xf3, 0x8a, 0x33, 0xf3, 0xf3, 0x5c, 0x12, 0x4b, 0x12, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0x94, 0xf4, 0xb9, 0x24, 0xb1, 0xc8, 0x15, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x09, 0x71, 0xb1,
	0xa4, 0x24, 0x96, 0x24, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x04, 0x81, 0xd9, 0x46, 0xf5, 0x5c,
	0xbc, 0xfe, 0x45, 0x89, 0xc9, 0x39, 0xa9, 0xc1, 0x10, 0x5b, 0x85, 0xf2, 0xb8, 0x04, 0x31, 0x4c,
	0x10, 0xd2, 0xd2, 0x43, 0x77, 0x85, 0x1e, 0x2e, 0x27, 0x48, 0x69, 0x13, 0xa5, 0x16, 0xe2, 0x24,
	0x25, 0x06, 0x27, 0xa7, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e,
	0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xd2, 0x48,
	0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x77, 0xce, 0x2f, 0xce, 0x0d, 0x07,
	0x05, 0x12, 0xc8, 0xdc, 0x14, 0xfd, 0x0a, 0x48, 0x60, 0x41, 0x43, 0x2a, 0x89, 0x0d, 0x1c, 0x54,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x91, 0x36, 0x64, 0x32, 0x4c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OracleServiceClient is the client API for OracleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OracleServiceClient interface {
	VoteExtensionData(ctx context.Context, in *VoteExtensionDataRequest, opts ...grpc.CallOption) (*VoteExtensionDataResponse, error)
}

type oracleServiceClient struct {
	cc grpc1.ClientConn
}

func NewOracleServiceClient(cc grpc1.ClientConn) OracleServiceClient {
	return &oracleServiceClient{cc}
}

func (c *oracleServiceClient) VoteExtensionData(ctx context.Context, in *VoteExtensionDataRequest, opts ...grpc.CallOption) (*VoteExtensionDataResponse, error) {
	out := new(VoteExtensionDataResponse)
	err := c.cc.Invoke(ctx, "/cosmwasm.slpp.v1.OracleService/VoteExtensionData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OracleServiceServer is the server API for OracleService service.
type OracleServiceServer interface {
	VoteExtensionData(context.Context, *VoteExtensionDataRequest) (*VoteExtensionDataResponse, error)
}

// UnimplementedOracleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOracleServiceServer struct {
}

func (*UnimplementedOracleServiceServer) VoteExtensionData(ctx context.Context, req *VoteExtensionDataRequest) (*VoteExtensionDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteExtensionData not implemented")
}

func RegisterOracleServiceServer(s grpc1.Server, srv OracleServiceServer) {
	s.RegisterService(&_OracleService_serviceDesc, srv)
}

func _OracleService_VoteExtensionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteExtensionDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleServiceServer).VoteExtensionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmwasm.slpp.v1.OracleService/VoteExtensionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleServiceServer).VoteExtensionData(ctx, req.(*VoteExtensionDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OracleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmwasm.slpp.v1.OracleService",
	HandlerType: (*OracleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VoteExtensionData",
			Handler:    _OracleService_VoteExtensionData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmwasm/slpp/v1/service.proto",
}

func (m *VoteExtensionDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteExtensionDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteExtensionDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *VoteExtensionDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteExtensionDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteExtensionDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintService(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VoteExtensionDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VoteExtensionDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VoteExtensionDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteExtensionDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteExtensionDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteExtensionDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteExtensionDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteExtensionDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
