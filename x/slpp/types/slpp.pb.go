// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmwasm/slpp/v1/slpp.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AVS represents the state-ful information stored per AVS
type AVS struct {
	ContractBin        []byte `protobuf:"bytes,1,opt,name=contract_bin,json=contractBin,proto3" json:"contract_bin,omitempty"`
	Id                 uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	SidecarDockerImage string `protobuf:"bytes,3,opt,name=sidecar_docker_image,json=sidecarDockerImage,proto3" json:"sidecar_docker_image,omitempty"`
}

func (m *AVS) Reset()         { *m = AVS{} }
func (m *AVS) String() string { return proto.CompactTextString(m) }
func (*AVS) ProtoMessage()    {}
func (*AVS) Descriptor() ([]byte, []int) {
	return fileDescriptor_32b8fd68673aa99c, []int{0}
}
func (m *AVS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AVS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AVS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AVS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AVS.Merge(m, src)
}
func (m *AVS) XXX_Size() int {
	return m.Size()
}
func (m *AVS) XXX_DiscardUnknown() {
	xxx_messageInfo_AVS.DiscardUnknown(m)
}

var xxx_messageInfo_AVS proto.InternalMessageInfo

func (m *AVS) GetContractBin() []byte {
	if m != nil {
		return m.ContractBin
	}
	return nil
}

func (m *AVS) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AVS) GetSidecarDockerImage() string {
	if m != nil {
		return m.SidecarDockerImage
	}
	return ""
}

// MsgRegisterAVS defines a message-type handled by the x/slpp module for ingressing a new AVS.
type MsgRegisterAVS struct {
	ContractBin        []byte `protobuf:"bytes,1,opt,name=contract_bin,json=contractBin,proto3" json:"contract_bin,omitempty"`
	SidecarDockerImage string `protobuf:"bytes,2,opt,name=sidecar_docker_image,json=sidecarDockerImage,proto3" json:"sidecar_docker_image,omitempty"`
}

func (m *MsgRegisterAVS) Reset()         { *m = MsgRegisterAVS{} }
func (m *MsgRegisterAVS) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAVS) ProtoMessage()    {}
func (*MsgRegisterAVS) Descriptor() ([]byte, []int) {
	return fileDescriptor_32b8fd68673aa99c, []int{1}
}
func (m *MsgRegisterAVS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAVS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAVS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAVS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAVS.Merge(m, src)
}
func (m *MsgRegisterAVS) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAVS) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAVS.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAVS proto.InternalMessageInfo

func (m *MsgRegisterAVS) GetContractBin() []byte {
	if m != nil {
		return m.ContractBin
	}
	return nil
}

func (m *MsgRegisterAVS) GetSidecarDockerImage() string {
	if m != nil {
		return m.SidecarDockerImage
	}
	return ""
}

// MsgRegisterAVSResponse defines the Msg/RegisterAVS response
type MsgRegisterAVSResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgRegisterAVSResponse) Reset()         { *m = MsgRegisterAVSResponse{} }
func (m *MsgRegisterAVSResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAVSResponse) ProtoMessage()    {}
func (*MsgRegisterAVSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32b8fd68673aa99c, []int{2}
}
func (m *MsgRegisterAVSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAVSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAVSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAVSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAVSResponse.Merge(m, src)
}
func (m *MsgRegisterAVSResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAVSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAVSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAVSResponse proto.InternalMessageInfo

func (m *MsgRegisterAVSResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*AVS)(nil), "cosmwasm.slpp.v1.AVS")
	proto.RegisterType((*MsgRegisterAVS)(nil), "cosmwasm.slpp.v1.MsgRegisterAVS")
	proto.RegisterType((*MsgRegisterAVSResponse)(nil), "cosmwasm.slpp.v1.MsgRegisterAVSResponse")
}

func init() { proto.RegisterFile("cosmwasm/slpp/v1/slpp.proto", fileDescriptor_32b8fd68673aa99c) }

var fileDescriptor_32b8fd68673aa99c = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0xce, 0x2f, 0xce,
	0x2d, 0x4f, 0x2c, 0xce, 0xd5, 0x2f, 0xce, 0x29, 0x28, 0xd0, 0x2f, 0x33, 0x04, 0xd3, 0x7a, 0x05,
	0x45, 0xf9, 0x25, 0xf9, 0x42, 0x02, 0x30, 0x49, 0x3d, 0xb0, 0x60, 0x99, 0xa1, 0x52, 0x16, 0x17,
	0xb3, 0x63, 0x58, 0xb0, 0x90, 0x22, 0x17, 0x4f, 0x72, 0x7e, 0x5e, 0x49, 0x51, 0x62, 0x72, 0x49,
	0x7c, 0x52, 0x66, 0x9e, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x4f, 0x10, 0x37, 0x4c, 0xcc, 0x29, 0x33,
	0x4f, 0x88, 0x8f, 0x8b, 0x29, 0x33, 0x45, 0x82, 0x49, 0x81, 0x51, 0x83, 0x25, 0x88, 0x29, 0x33,
	0x45, 0xc8, 0x80, 0x4b, 0xa4, 0x38, 0x33, 0x25, 0x35, 0x39, 0xb1, 0x28, 0x3e, 0x25, 0x3f, 0x39,
	0x3b, 0xb5, 0x28, 0x3e, 0x33, 0x37, 0x31, 0x3d, 0x55, 0x82, 0x59, 0x81, 0x51, 0x83, 0x33, 0x48,
	0x08, 0x2a, 0xe7, 0x02, 0x96, 0xf2, 0x04, 0xc9, 0x28, 0xa5, 0x72, 0xf1, 0xf9, 0x16, 0xa7, 0x07,
	0xa5, 0xa6, 0x67, 0x16, 0x97, 0xa4, 0x16, 0x11, 0x69, 0x2d, 0x2e, 0x6b, 0x98, 0x70, 0x5a, 0xa3,
	0xc1, 0x25, 0x86, 0x6a, 0x4d, 0x50, 0x6a, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0x2a, 0xd4, 0x0b, 0x8c,
	0x30, 0x2f, 0x18, 0x25, 0x71, 0x31, 0xfb, 0x16, 0xa7, 0x0b, 0x45, 0x73, 0x71, 0x23, 0x3b, 0x4a,
	0x41, 0x0f, 0x3d, 0x94, 0xf4, 0x50, 0xcd, 0x93, 0xd2, 0x20, 0xa4, 0x02, 0x66, 0xa3, 0x12, 0x83,
	0x93, 0xc3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1,
	0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0xa9, 0xa5, 0x67, 0x96,
	0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x3b, 0xe7, 0x17, 0xe7, 0x86, 0x83, 0x22, 0x0d,
	0x64, 0x68, 0x8a, 0x7e, 0x05, 0x24, 0xf2, 0x4a, 0x2a, 0x0b, 0x52, 0x8b, 0x93, 0xd8, 0xc0, 0x71,
	0x67, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x4a, 0xba, 0x39, 0xda, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	RegisterAVS(ctx context.Context, in *MsgRegisterAVS, opts ...grpc.CallOption) (*MsgRegisterAVSResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterAVS(ctx context.Context, in *MsgRegisterAVS, opts ...grpc.CallOption) (*MsgRegisterAVSResponse, error) {
	out := new(MsgRegisterAVSResponse)
	err := c.cc.Invoke(ctx, "/cosmwasm.slpp.v1.Msg/RegisterAVS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	RegisterAVS(context.Context, *MsgRegisterAVS) (*MsgRegisterAVSResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterAVS(ctx context.Context, req *MsgRegisterAVS) (*MsgRegisterAVSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAVS not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterAVS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterAVS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterAVS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmwasm.slpp.v1.Msg/RegisterAVS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterAVS(ctx, req.(*MsgRegisterAVS))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmwasm.slpp.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAVS",
			Handler:    _Msg_RegisterAVS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmwasm/slpp/v1/slpp.proto",
}

func (m *AVS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AVS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AVS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SidecarDockerImage) > 0 {
		i -= len(m.SidecarDockerImage)
		copy(dAtA[i:], m.SidecarDockerImage)
		i = encodeVarintSlpp(dAtA, i, uint64(len(m.SidecarDockerImage)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintSlpp(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContractBin) > 0 {
		i -= len(m.ContractBin)
		copy(dAtA[i:], m.ContractBin)
		i = encodeVarintSlpp(dAtA, i, uint64(len(m.ContractBin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAVS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAVS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAVS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SidecarDockerImage) > 0 {
		i -= len(m.SidecarDockerImage)
		copy(dAtA[i:], m.SidecarDockerImage)
		i = encodeVarintSlpp(dAtA, i, uint64(len(m.SidecarDockerImage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractBin) > 0 {
		i -= len(m.ContractBin)
		copy(dAtA[i:], m.ContractBin)
		i = encodeVarintSlpp(dAtA, i, uint64(len(m.ContractBin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAVSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAVSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAVSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintSlpp(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSlpp(dAtA []byte, offset int, v uint64) int {
	offset -= sovSlpp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AVS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractBin)
	if l > 0 {
		n += 1 + l + sovSlpp(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSlpp(uint64(m.Id))
	}
	l = len(m.SidecarDockerImage)
	if l > 0 {
		n += 1 + l + sovSlpp(uint64(l))
	}
	return n
}

func (m *MsgRegisterAVS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractBin)
	if l > 0 {
		n += 1 + l + sovSlpp(uint64(l))
	}
	l = len(m.SidecarDockerImage)
	if l > 0 {
		n += 1 + l + sovSlpp(uint64(l))
	}
	return n
}

func (m *MsgRegisterAVSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSlpp(uint64(m.Id))
	}
	return n
}

func sovSlpp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSlpp(x uint64) (n int) {
	return sovSlpp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AVS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSlpp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AVS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AVS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlpp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSlpp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSlpp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractBin = append(m.ContractBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractBin == nil {
				m.ContractBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlpp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SidecarDockerImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlpp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlpp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlpp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SidecarDockerImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSlpp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSlpp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAVS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSlpp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAVS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAVS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlpp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSlpp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSlpp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractBin = append(m.ContractBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractBin == nil {
				m.ContractBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SidecarDockerImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlpp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlpp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlpp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SidecarDockerImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSlpp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSlpp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAVSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSlpp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAVSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAVSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlpp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSlpp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSlpp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSlpp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSlpp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSlpp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSlpp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSlpp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSlpp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSlpp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSlpp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSlpp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSlpp = fmt.Errorf("proto: unexpected end of group")
)
